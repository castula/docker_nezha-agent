name: Docker Build and Push

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Determine Build Condition and Download Artifacts
        id: build_condition
        run: |
          set -e
          REMOTE_VERSION=$(curl -s "https://api.github.com/repos/nezhahq/agent/releases/latest" | jq -r .tag_name)
          echo "最新远程版本: ${REMOTE_VERSION}"
          VERSION_FILE=".github/last_version.txt"
          LOCAL_VERSION=""

          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "schedule" ]]; then
            echo "由 ${{ github.event_name }} 触发，检查版本..."
          else
            echo "未知事件类型: ${{ github.event_name }}，跳过构建."
            echo "SHOULD_BUILD=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ -f "$VERSION_FILE" ]; then
            LOCAL_VERSION=$(cat "$VERSION_FILE")
            echo "上次构建版本: $LOCAL_VERSION"
          else
            LOCAL_VERSION="none"
            echo "未发现版本文件，视为初次构建。"
          fi

          if [ "$REMOTE_VERSION" != "$LOCAL_VERSION" ]; then
            echo "发现新版本: $REMOTE_VERSION, 准备构建."
            echo "SHOULD_BUILD=true" >> "$GITHUB_OUTPUT"
            echo "AGENT_VERSION=${REMOTE_VERSION}" >> "$GITHUB_OUTPUT"

            mkdir -p build-context
            ARCHS=("amd64" "arm64")
            for arch in "${ARCHS[@]}"; do
              echo "正在下载 nezha-agent_linux_${arch}.zip"
              curl -fL -o build-context/nezha-agent_linux_${arch}.zip "https://github.com/nezhahq/agent/releases/download/${REMOTE_VERSION}/nezha-agent_linux_${arch}.zip"
            done
          else
            echo "无版本更新，跳过构建."
            echo "SHOULD_BUILD=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Debug build condition
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Should build: ${{ steps.build_condition.outputs.SHOULD_BUILD }}"
          echo "Agent version: ${{ steps.build_condition.outputs.AGENT_VERSION }}"

      - name: Set up QEMU
        if: ${{ steps.build_condition.outputs.SHOULD_BUILD == 'true' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ steps.build_condition.outputs.SHOULD_BUILD == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ steps.build_condition.outputs.SHOULD_BUILD == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        if: ${{ steps.build_condition.outputs.SHOULD_BUILD == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push (multi-arch) to GHCR and DockerHub
        if: ${{ steps.build_condition.outputs.SHOULD_BUILD == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/nezha-agent:${{ steps.build_condition.outputs.AGENT_VERSION }}
            ghcr.io/${{ github.repository_owner }}/nezha-agent:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/nezha-agent:${{ steps.build_condition.outputs.AGENT_VERSION }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/nezha-agent:latest
          build-args: |
            AGENT_VERSION=${{ steps.build_condition.outputs.AGENT_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save last version to file and commit
        if: ${{ steps.build_condition.outputs.SHOULD_BUILD == 'true' }}
        run: |
          echo "${{ steps.build_condition.outputs.AGENT_VERSION }}" > .github/last_version.txt
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .github/last_version.txt

          if git diff --staged --quiet; then
            echo "没有变更需要提交"
          else
            echo "提交版本文件变更..."
            git commit -m "chore: update last_version.txt to ${{ steps.build_condition.outputs.AGENT_VERSION }}"

            for i in {1..3}; do
              echo "尝试推送 (第 $i 次)..."
              if git push; then
                echo "推送成功!"
                break
              else
                echo "推送失败，等待 5 秒后重试..."
                sleep 5
                git pull --rebase
              fi

              if [ $i -eq 3 ]; then
                echo "推送失败，已达到最大重试次数"
                exit 1
              fi
            done
          fi

      - name: Delete untagged images from GHCR
        if: ${{ steps.build_condition.outputs.SHOULD_BUILD == 'true' }}
        uses: Chizkiyahu/delete-untagged-ghcr-action@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.event.repository.name }}
          package_name: nezha-agent
          untagged_only: true
          owner_type: ${{ github.event.repository.owner.type == 'Organization' && 'org' || 'user' }}

      - name: Build Summary
        if: always()
        run: |
          if [ "${{ steps.build_condition.outputs.SHOULD_BUILD }}" == "true" ]; then
            echo "✅ 构建完成"
            echo "📦 构建版本: ${{ steps.build_condition.outputs.AGENT_VERSION }}"
            echo "🏷️ 推送标签:"
            echo "  - ghcr.io/${{ github.repository_owner }}/nezha-agent:${{ steps.build_condition.outputs.AGENT_VERSION }}"
            echo "  - ghcr.io/${{ github.repository_owner }}/nezha-agent:latest"
            echo "  - docker.io/${{ secrets.DOCKERHUB_USERNAME }}/nezha-agent:${{ steps.build_condition.outputs.AGENT_VERSION }}"
            echo "  - docker.io/${{ secrets.DOCKERHUB_USERNAME }}/nezha-agent:latest"
          else
            echo "⏭️ 跳过构建 - 无版本更新"
          fi
